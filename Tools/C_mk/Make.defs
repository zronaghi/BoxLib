# Check python version
my_python_version := $(word 2, $(shell python --version 2>&1))
ifneq ($(firstword $(sort 2.7 $(my_python_version))), 2.7)
  $(error Python >= 2.7 required! Your version is $(my_python_version))
endif

include $(BOXLIB_HOME)/Tools/C_mk/Make.machines

ifndef PRECISION
  PRECISION = DOUBLE
endif

ifndef DEBUG
  DEBUG	= TRUE
endif

ifndef PROFILE
  PROFILE = FALSE
endif

ifndef TRACE_PROFILE
  TRACE_PROFILE = FALSE
endif
ifeq ($(TRACE_PROFILE),TRUE)
  PROFILE = TRUE
endif

ifndef COMM_PROFILE
  COMM_PROFILE = FALSE
endif
ifeq ($(COMM_PROFILE),TRUE)
  PROFILE = TRUE
endif

ifndef MEM_PROFILE
  MEM_PROFILE = FALSE
endif

ifndef TEST
  TEST = FALSE
endif

ifndef USE_ASSERTION
  USE_ASSERTION = FALSE
endif

ifndef BACKTRACE
  BACKTRACE = FALSE
endif

ifndef LAZY
  LAZY = FALSE
endif

ifndef DIM
  DIM = 2
endif

ifndef USE_MPI
  USE_MPI = FALSE
endif

ifeq ($(USE_UPCXX),TRUE)
  USE_MPI = TRUE
endif

ifeq ($(USE_MPI3),TRUE)
  USE_MPI = TRUE
endif

ifndef DIMENSION_AGNOSTIC
  DIMENSION_AGNOSTIC = FALSE
endif

ifndef EBASE
  EBASE = main
endif


FORTLINK  	= UNDERSCORE

FORT_CPP        = cpp -E -traditional-cpp -P
FORTPREP  	= perl $(BOXLIB_HOME)/Tools/C_scripts/strip72 -c
F90PREP  	= cat  # a placeholder in case we have to write something later
MKDEP		= perl $(BOXLIB_HOME)/Tools/C_scripts/mkdep
MODDEP		= $(BOXLIB_HOME)/Tools/F_scripts/dep.py

EXE_OUTPUT_OPTION      = -o $(objEXETempDir)/$*.o
FORT_EXE_OUTPUT_OPTION = -o $(objEXETempDir)/$*.o


lowercase_comp := $(shell echo $(COMP) | tr A-Z a-z)

ifeq ($(lowercase_comp),$(filter $(lowercase_comp),gcc gnu g++))
  lowercase_comp = gnu
  $(info Loading $(BOXLIB_HOME)/Tools/C_mk/comps/gnu.mak...)
  include        $(BOXLIB_HOME)/Tools/C_mk/comps/gnu.mak
else ifeq ($(lowercase_comp),intel)
  $(info Loading $(BOXLIB_HOME)/Tools/C_mk/comps/intel.mak...)
  include        $(BOXLIB_HOME)/Tools/C_mk/comps/intel.mak
else ifeq ($(lowercase_comp),kokkos)
  $(info Loading $(BOXLIB_HOME)/Tools/C_mk/comps/kokkos.mak...)
  include        $(BOXLIB_HOME)/Tools/C_mk/comps/kokkos.mak
else ifeq ($(lowercase_comp),cray)
  $(info Loading $(BOXLIB_HOME)/Tools/C_mk/comps/cray.mak...)
  include        $(BOXLIB_HOME)/Tools/C_mk/comps/cray.mak
else ifeq ($(lowercase_comp),pgi)
  $(info Loading $(BOXLIB_HOME)/Tools/C_mk/comps/pgi.mak...)
  include        $(BOXLIB_HOME)/Tools/C_mk/comps/pgi.mak
else
  $(error Unknown compiler $(COMP). Supported compilers are gnu, intel, cray, and pgi)
endif

ifeq ($(DEBUG),TRUE)
    CPPFLAGS	+= -DDEBUG
    DebugSuffix := .DEBUG
else
    CPPFLAGS	+= -DNDEBUG
    DebugSuffix :=
endif

ifeq ($(PROFILE),TRUE)
    CPPFLAGS    += -DBL_PROFILING
    ifeq ($(TRACE_PROFILE)$(COMM_PROFILE),TRUETRUE)
        CPPFLAGS    += -DBL_TRACE_PROFILING
        CPPFLAGS    += -DBL_COMM_PROFILING
        ProfSuffix	:= .COMTR_PROF
    endif
    ifeq ($(TRACE_PROFILE)$(COMM_PROFILE),TRUEFALSE)
        CPPFLAGS    += -DBL_TRACE_PROFILING
        ProfSuffix	:= .TRACE_PROF
    endif
    ifeq ($(TRACE_PROFILE)$(COMM_PROFILE),FALSETRUE)
        CPPFLAGS    += -DBL_COMM_PROFILING
        ProfSuffix	:= .COMM_PROF
    endif
    ifeq ($(TRACE_PROFILE)$(COMM_PROFILE),FALSEFALSE)
        ProfSuffix	:= .PROF
    endif
else
    ifndef TINY_PROFILE
        TINY_PROFILE = FALSE
    endif
    ifeq ($(TINY_PROFILE),TRUE)
        CPPFLAGS    += -DBL_TINY_PROFILING
        ProfSuffix	:= .TPROF
    else
        ProfSuffix	:=
    endif
endif

ifeq ($(MEM_PROFILE),TRUE)
  CPPFLAGS += -DBL_MEM_PROFILING
  MProfSuffix := .MPROF
else
  MProfSuffix :=
endif

ifeq ($(TEST),TRUE)
    CPPFLAGS += -DBL_TESTING
    ifneq ($(DEBUG),TRUE)
        DebugSuffix := .TEST
    endif
endif

ifeq ($(BACKTRACE),TRUE)
    CPPFLAGS += -DBL_BACKTRACING -DBL_TESTING
    BTSuffix := .BT
else
    BTSuffix :=
endif

ifeq ($(LAZY),TRUE)
    CPPFLAGS += -DBL_LAZY
endif

ifeq ($(USE_ARRAYVIEW), TRUE)
  DEFINES += -DBL_USE_ARRAYVIEW
  ARRAYVIEWDIR ?= $(BOXLIB_HOME)/../ArrayView
  INCLUDE_LOCATIONS += $(ARRAYVIEWDIR)
  LIBRARY_LOCATIONS += $(ARRAYVIEWDIR)
  LIBRARIES += -larrayview$(DIM)d
  VPATH_LOCATIONS   += $(ARRAYVIEWDIR)
endif

ifeq ($(USE_MPI),TRUE)
    MPISuffix	:= .MPI
    CPPFLAGS	+= -DBL_USE_MPI
else
    MPISuffix	:=
endif

ifeq ($(USE_MPI3),TRUE)
    MPISuffix := .MPI3
    CPPFLAGS  += -DBL_USE_MPI3
endif

ifeq ($(USE_UPCXX),TRUE)
    UPCXXSuffix := .UPCXX
    CPPFLAGS    += -DBL_USE_UPCXX
else
    UPCXXSuffix :=
endif

ifeq ($(USE_UPCXX),TRUE)
    CPPFLAGS  += -DBL_USE_TEAM 
else
  ifeq ($(USE_MPI3),TRUE)
    CPPFLAGS  += -DBL_USE_TEAM 
  endif
endif

ifeq ($(USE_OMP),TRUE)
    OMPSuffix	:= .OMP
    CPPFLAGS	+= -DBL_USE_OMP
else
    OMPSuffix	:=
endif

ifeq ($(PRECISION),FLOAT)
    DEFINES += -DBL_USE_FLOAT
    PrecisionSuffix := .$(PRECISION)
else
    PrecisionSuffix :=
endif

objStandalone	= 	$(CEXE_sources:%.cpp=%.o)			\
			$(cEXE_sources:%.c=%.o)				\
			$(fEXE_sources:%.f=%.o)				\
			$(FEXE_sources:%.F=%.o)				\
			$(f90EXE_sources:%.f90=%.o)			\
			$(F90EXE_sources:%.F90=%.o)

objForExecs	= $(addprefix $(objEXETempDir)/, $(objStandalone))

DEFINES	+= -DBL_SPACEDIM=$(DIM)				\
           -DBL_FORT_USE_$(FORTLINK)			\
           -DBL_$(shell uname)


ifeq ($(DIMENSION_AGNOSTIC),TRUE)
DEFINES += -DDIMENSION_AGNOSTIC
endif

ifeq ($(DEBUG),TRUE)
  DEFINES += -DBL_USE_ASSERTION
else
ifeq ($(USE_ASSERTION),TRUE)
  DEFINES += -DBL_USE_ASSERTION
endif
endif

ifeq ($(USE_PARTICLES),TRUE)
  DEFINES += -DUSE_PARTICLES -DPARTICLES
endif

includes	= -I. $(addprefix -I, $(INCLUDE_LOCATIONS))
fincludes	= $(includes)
fmoddir         = $(objEXETempDir)

CPPFLAGS	+= $(DEFINES)

libraries	= $(LIBRARIES) $(XTRALIBS)

LDFLAGS		+= -L. $(addprefix -L, $(LIBRARY_LOCATIONS))

machineSuffix	= $(lowercase_comp)$(PrecisionSuffix)$(DebugSuffix)$(ProfSuffix)$(MProfSuffix)$(BTSuffix)$(MPISuffix)$(UPCXXSuffix)$(OMPSuffix)$(USERSuffix)

optionsSuffix	= $(DIM)d.$(machineSuffix)

executable	= $(addsuffix $(optionsSuffix).ex, $(EBASE))

depEXETempDir	= d/$(optionsSuffix).EXE
objEXETempDir   = o/$(optionsSuffix).EXE
f77EXETempDir	= f/$(optionsSuffix).EXE

#
# For source code manipulation
#
CSRCALL		= $(CEXE_sources) $(CEXE_headers)
cSRCALL		= $(cEXE_sources) $(cEXE_headers)
fSRCALL		= $(fEXE_sources) $(fEXE_headers)
FSRCALL		= $(FEXE_sources) $(FEXE_headers)
f90SRCALL	= $(f90EXE_sources) $(f90EXE_headers)
F90SRCALL	= $(F90EXE_sources) $(F90EXE_headers)
allSources	= $(CSRCALL) $(FSRCALL) $(F90SRCALL) $(cSRCALL) $(fSRCALL) $(f90SRCALL)

ifeq ($(USE_CCACHE),TRUE)
  CCACHE = ccache
else
  CCACHE =
endif

# place holder
F90CACHE =

ifeq ($(USE_VTUNE),TRUE)
  $(into Loading $(BOXLIB_HOME)/Tools/C_mk/tools/Make.vtune
  include        $(BOXLIB_HOME)/Tools/C_mk/tools/Make.vtune
endif

# Use Sam Williams's HPGMG
ifeq ($(USE_HPGMG), TRUE)
  $(info Loading $(BOXLIB_HOME)/Tools/C_mk/packages/Make.hpgmg...)
  include        $(BOXLIB_HOME)/Tools/C_mk/packages/Make.hpgmg
endif

ifneq ("$(wildcard $(BOXLIB_HOME)/Tools/C_mk/sites/Make.$(host_name))","")
  $(info Loading $(BOXLIB_HOME)/Tools/C_mk/sites/Make.$(host_name)...)
  include        $(BOXLIB_HOME)/Tools/C_mk/sites/Make.$(host_name)
else
  $(info Loading $(BOXLIB_HOME)/Tools/C_mk/sites/Make.$(which_site)...)
  include        $(BOXLIB_HOME)/Tools/C_mk/sites/Make.$(which_site)
endif

ifeq ($(USE_UPCXX),TRUE)
  $(info Loading $(BOXLIB_HOME)/Tools/C_mk/Make.upcxx...)
  include        $(BOXLIB_HOME)/Tools/C_mk/Make.upcxx
endif

ifneq ("$(wildcard $(BOXLIB_HOME)/Tools/C_mk/Make.local)","")
  $(info Loading $(BOXLIB_HOME)/Tools/C_mk/Make.local...)
  include        $(BOXLIB_HOME)/Tools/C_mk/Make.local
endif
