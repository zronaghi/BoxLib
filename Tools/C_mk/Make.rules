
FINAL_VPATH_LOCATIONS = . $(VPATH_LOCATIONS)
vpath %.f    $(FINAL_VPATH_LOCATIONS)
vpath %.fi   $(FINAL_VPATH_LOCATIONS)
vpath %.F    $(FINAL_VPATH_LOCATIONS)
vpath %.f90  $(FINAL_VPATH_LOCATIONS)
vpath %.F90  $(FINAL_VPATH_LOCATIONS)
vpath %.c    $(FINAL_VPATH_LOCATIONS)
vpath %.cpp  $(FINAL_VPATH_LOCATIONS)
vpath %.h    $(FINAL_VPATH_LOCATIONS)
vpath %.H    $(FINAL_VPATH_LOCATIONS)

# Suppress display of executed commands.  Default verbose
SILENT =
ifeq ($(VERBOSE),OFF)
  SILENT = @
else ifeq ($(VERBOSE),FALSE)
  SILENT = @
endif

#
# Rules for building executable.
#
$(executable):	$(objForExecs) $(KOKKOS_LINK_DEPENDS)
	@echo Linking $@ ...
	$(SILENT) $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(includes) $(LDFLAGS) $(KOKKOS_LDFLAGS) -o $@ $^ $(libraries)
#	@echo SUCCESS

clean::
	@echo Cleaning...
	$(SILENT) $(RM) $(f77EXETempDir)/*.f $(f77EXETempDir)/*.f90 $(objEXETempDir)/*.o
	$(SILENT) $(RM) $(f77EXETempDir)/*.f $(f77EXETempDir)/*.f90 $(objEXETempDir)/*.o
	$(SILENT) $(RM) *.optrpt $(objEXETempDir)/*.optrpt
	$(SILENT) $(RM) $(executable)

realclean:: clean
	@echo Cleaning ...
	$(SILENT) $(RM) TAGS tags
	$(SILENT) $(RM) -r d o f *~
	$(SILENT) $(RM) *.ex *.o
	$(SILENT) $(RM) *.mod

file_locations:
	$(BOXLIB_HOME)/Tools/F_scripts/find_files_vpath.py --vpath "$(FINAL_VPATH_LOCATIONS)" --files "$(CEXE_sources) $(FEXE_sources) $(cEXE_sources) $(fEXE_sources) $(f90EXE_sources) $(F90EXE_sources) $(CEXE_headers) $(cEXE_headers) $(fEXE_headers) $(FEXE_headers)"


tags:	$(allSources)
	@echo ctags ...
	$(SILENT) ctags --fortran-kinds=+i $(abspath $^)

TAGS:	$(allSources)
	@echo etags $< ...
	$(SILENT) etags $(abspath $^)

.PHONY:	all clean realclean file_locations tags TAGS

#
# Rules for objects.
#
$(objEXETempDir)/%.o: %.cpp
	@echo Compiling $*.cpp ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	$(SILENT) $(CCACHE) $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(includes) -c $< $(EXE_OUTPUT_OPTION)

$(objEXETempDir)/%.o: %.c
	@echo Compiling $*.c ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	$(SILENT) $(CCACHE) $(CC) $(CFLAGS) -DBL_LANG_C $(CPPFLAGS) $(includes) -c $< $(EXE_OUTPUT_OPTION)

$(objEXETempDir)/%.o: %.f
	@echo Compiling $*.f ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	$(SILENT) $(F90CACHE) $(FC) $(FFLAGS) $(fincludes) -c $< $(FORT_EXE_OUTPUT_OPTION)

$(objEXETempDir)/%.o: %.F
	@echo Compiling $*.F ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	@if [ ! -d $(f77EXETempDir) ]; then mkdir -p $(f77EXETempDir); fi
	$(SILENT) $(FORT_CPP) -DBL_LANG_FORT $(CPPFLAGS) $(fincludes) $< | $(FORTPREP) > $(f77EXETempDir)/$*.f
	$(SILENT) $(F90CACHE) $(FC) $(FFLAGS) $(fincludes) -c $(f77EXETempDir)/$*.f $(FORT_EXE_OUTPUT_OPTION)

$(objEXETempDir)/%.o: %.f90
	@echo Compiling $*.f90 ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	$(SILENT) $(F90CACHE) $(F90) $(F90FLAGS) $(fincludes) -c $< $(FORT_EXE_OUTPUT_OPTION)

$(objEXETempDir)/%.o: %.F90
	@echo Compiling $*.F90 ...
	@if [ ! -d $(objEXETempDir) ]; then mkdir -p $(objEXETempDir); fi
	$(SILENT) $(F90CACHE) $(F90) $(F90FLAGS) -DBL_LANG_FORT $(CPPFLAGS) $(fincludes) -c $< $(FORT_EXE_OUTPUT_OPTION)

#
# Rules for dependencies in bare object files.
#
$(depEXETempDir)/%.d: %.cpp
	@echo Depending $< ...
	@if [ ! -d $(depEXETempDir) ]; then mkdir -p $(depEXETempDir); fi
	@$(SHELL) -ec '$(MKDEP) $(includes) $< | \
		sed -e '\''s,^[^:]*\/,,'\'' | \
		sed -e '\''s,$*.o,$(objEXETempDir)/& $@,'\'' > $@'

$(depEXETempDir)/%.d: %.c
	@echo Depending $< ...
	@if [ ! -d $(depEXETempDir) ]; then mkdir -p $(depEXETempDir); fi
	@$(SHELL) -ec '$(MKDEP) $(includes) $< | \
		sed -e '\''s,^[^:]*\/,,'\'' | \
		sed -e '\''s,$*.o,$(objEXETempDir)/& $@,'\'' > $@'

$(depEXETempDir)/%.d: %.F
	@echo Depending $< ...
	@if [ ! -d $(depEXETempDir) ]; then mkdir -p $(depEXETempDir); fi
	@$(SHELL) -ec '$(MKDEP) -fortran $(fincludes) $< | \
		sed -e '\''s,^[^:]*\/,,'\'' | \
		sed -e '\''s,$*.o,$(objEXETempDir)/& $@,'\'' > $@'

$(depEXETempDir)/%.d: %.f
	@echo Depending $< ...
	@if [ ! -d $(depEXETempDir) ]; then mkdir -p $(depEXETempDir); fi
	@$(SHELL) -ec '$(MKDEP) -fortran $(fincludes) $< | \
		sed -e '\''s,^[^:]*\/,,'\'' | \
		sed -e '\''s,$*.o,$(objEXETempDir)/& $@,'\'' > $@'

DEP_CHECK_OPTS :=

$(depEXETempDir)/f90.depends: $(f90EXE_sources) $(F90EXE_sources) 
	@if [ ! -d $(depEXETempDir) ]; then mkdir -p $(depEXETempDir); fi
	@if [ ! -d $(f77EXETempDir) ]; then mkdir -p $(f77EXETempDir); fi
	@echo "Building f90/F90 dependency File ..."
	$(MODDEP) $(DEP_CHECK_OPTS) --prefix $(objEXETempDir) \
            --temp_dir $(f77EXETempDir) \
            --cpp "$(FORT_CPP)" \
            --defines "-DBL_LANG_FORT $(CPPFLAGS) $(fincludes)" \
            --f90_preprocess "$(F90PREP)" $^ > $(depEXETempDir)/f90.depends 

#
# Now load/build the dependency files.
#
ifneq ($(MAKECMDGOALS),realclean)
ifneq ($(MAKECMDGOALS),clean)

ifdef CEXE_sources
-include $(CEXE_sources:%.cpp=$(depEXETempDir)/%.d)
endif

ifdef cEXE_sources
-include $(cEXE_sources:%.c=$(depEXETempDir)/%.d)
endif

ifdef fEXE_sources
-include $(fEXE_sources:%.f=$(depEXETempDir)/%.d)
endif

ifdef FEXE_sources
-include $(FEXE_sources:%.F=$(depEXETempDir)/%.d)
endif

ifneq "$(strip $(f90EXE_sources) $(F90EXE_sources))" ""
include $(depEXETempDir)/f90.depends
endif

endif
endif

ifneq ($(MAKECMDGOALS),$(filter $(MAKECMDGOALS),clean realclean file_locations tags TAGS))
  ifdef has_compiler_mismatch
    $(error $(has_compiler_mismatch))
  endif
endif

#-----------------------------------------------------------------------------
# for debugging.  To see the value of a Makefile variable,
# e.g. libraries, simply do "make print-libraries".  This will
# print out the value.
print-%:
	@echo $* is $($*)

.PHONY: help
help:
	@echo ""
	@echo "The rule for compiling foo.cpp  is: \$$(CXX) \$$(CXXFLAGS) \$$(CPPFLAGS) \$$(includes) -c foo.o foo.cpp"
	@echo "The rule for compiling foo.c    is: \$$(CC) \$$(CFLAGS) \$$(CPPFLAGS) \$$(includes) -c foo.o foo.c"
	@echo "The rule for compiling foo.f90  is: \$$(F90) \$$(F90FLAGS) \$$(fincludes) -c foo.o foo.f90"
	@echo "The rule for compiling foo.F90  is: \$$(F90) \$$(F90FLAGS) \$$(CPPFLAGS) \$$(fincludes) -c foo.o foo.F90"
	@echo "The rule for compiling foo.[fF] is: \$$(FC) \$$(FFLAGS) \$$(fincludes) -c foo.o foo.f"
	@echo "    Note that .F files are preprocessed with cpp into .f files before being compiled."
	@echo "The rule for linking            is: \$$(CXX) \$$(CXXFLAGS) \$$(CPPFLAGS) \$$(includes) \$$(LDFLAGS) -o \$$(executable) *.o \$$(libraries)"
	@echo ""
	@echo "Here the variables are set to:"
	@echo "    CXX        = $(CXX)"
	@echo "    CC         = $(CC)"
	@echo "    FC         = $(FC)"
	@echo "    F90        = $(F90)"
	@echo "    CPPFLAGS   = $(CPPFLAGS)"
	@echo "    CXXFLAGS   = $(CXXFLAGS)"
	@echo "    CFLAGS     = $(CFLAGS)"
	@echo "    includes   = $(includes)"
	@echo "    FFLAGS     = $(FFLAGS)"
	@echo "    F90FLAGS   = $(F90FLAGS)"
	@echo "    fincludes  = $(fincludes)"
	@echo "    LDFLAGS    = $(LDFLAGS)"
	@echo "    libraries  = $(libraries)"
	@echo "    executable = $(executable)"
	@echo ""
	@echo "Read Tools/C_mk/README.md for details on tweaking the make system."
